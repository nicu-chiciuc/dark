let c (arg: string) =
  (Test.toChar_v0 arg) |> Test.unwrap

"a" ++ "̂" = "â"
"hello" ++ " world" = "hello world"
"ᄀ" ++ "ᅡᆨ" = "각"
"" ++ "a" = "a"
"a" ++ "" = "a"
"a" ++ "̂" = "â"
"Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" = "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"
"﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" = "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽"
"Είναι προικισμένοι με λογική" = "Είναι προικισμένοι με λογική"
"👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" = "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"

String.append_v1 "a" "̂" = "â"
String.append_v1 "hello" " world" = "hello world"
String.append_v1 "hello" "world" = "helloworld" // String.append_v1 works for ASCII range
String.append_v1 "ᄀ" "ᅡᆨ" = "각"
String.append_v1 "żółw" "😄" = "żółw😄" // String.append_v1 works on non-ascii strings
String.append_v1 "🧑🏼‍💻" "🧑🏻‍🍼" = "🧑🏼‍💻🧑🏻‍🍼"
String.append_v1 "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" "👱👱🏻👱🏼👱🏽👱🏾👱🏿" = "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽👱👱🏻👱🏼👱🏽👱🏾👱🏿"
String.append_v1 "🧟‍♂️🧟‍♀️" "🧟‍♂️" = "🧟‍♂️🧟‍♀️🧟‍♂️"
String.append_v1  "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" "👨‍❤️‍💋‍👨"= "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇👨‍❤️‍💋‍👨"

(String.join_v0 ["a"; "̂"] "") |> String.base64Encode_v0 = "YcyC"
String.join_v0 ["hello"; " world"] "" = "hello world"
String.join_v0 ["﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽", "🧟‍♀️"] "" = "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽🧟‍♀️"
String.join_v0 ["👱👱🏻👱🏼👱🏽👱🏾👱🏿", "👨‍❤️‍💋‍👨", "﷽﷽﷽"] "" = "👱👱🏻👱🏼👱🏽👱🏾👱🏿👨‍❤️‍💋‍👨﷽﷽﷽"
String.join_v0 ["🧟‍♀️🧟‍♂️", "🧟‍♀️🧑🏽‍🦰"] "" = "🧟‍♀️🧟‍♂️🧟‍♀️🧑🏽‍🦰"
String.join_v0 ["👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️", "‍⚧️‍️🇵🇷"] "" = "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"
String.join_v0 ["🧟‍♀️🧟‍♂️‍", "🧟‍♀️🧑🏽‍🦰‍‍"] "" = "🧟‍♀️🧟‍♂️‍🧟‍♀️🧑🏽‍🦰‍‍"
String.join_v0 ["🧑🏽‍🦰‍", "🧑🏼‍💻‍‍"] "" = "🧑🏽‍🦰‍🧑🏼‍💻‍‍"
String.join_v0 ["a"; 0] "" = Test.typeError_v0 "Expected `l` to be a list of Strs, but the list contained `0`"
Bytes.length (String.toBytes_v0 "🧑🏽‍🦰🧑🏼‍💻🧑🏻‍🍼✋✋🏻✋🏿") = 62
Bytes.length (String.toBytes_v0 "😄APPLE🍏") = 13
Bytes.length (String.toBytes_v0 "Είναι προικισμένοι με λογική") = 53
Bytes.length (String.toBytes_v0 "") = 0
Bytes.length (String.toBytes_v0 "🧑🏽‍🦰🧑🏼‍💻🧑🏻‍🍼✋✋🏻✋🏿") = 62
Bytes.length (String.toBytes_v0 "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽") = 48
Bytes.length (String.toBytes_v0 "👱👱🏻👱🏼👱🏽👱🏾👱🏿") = 44
Bytes.length (String.toBytes_v0 "🧟‍♀️🧟‍♂️") = 26
Bytes.length (String.toBytes_v0 "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷") = 82
Bytes.length (String.toBytes_v0 "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇") = 49
Bytes.length (String.toBytes_v0 "") = 0

String.startsWith_v0 "a string" "a s" = true
String.startsWith_v0 "a string" " s" = false
String.startsWith_v0 "żółw" "żó" = true
String.startsWith_v0 "żółw" "r22" = false
String.startsWith_v0 "👩🏻‍🚀🍇" "🍇" = false
String.startsWith_v0 "123456" "123" = true
String.startsWith_v0 "" "" = true
String.startsWith_v0 "E" "\u0014\u0004" = false
String.startsWith_v0 "🧑🏽‍🦰🧑🏼‍💻🧑🏻‍🍼✋✋🏻✋🏿" "🧑🏾‍🦰" = false
String.startsWith_v0 "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚" = true
String.startsWith_v0 "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" "﷽﷽﷽﷽" = true
String.startsWith_v0 "👱👱🏻👱🏼👱🏽👱🏾👱🏿" "👱🏿" = false
String.startsWith_v0 "🧟‍♀️🧟‍♂️" "🧟‍♂️" = false
String.startsWith_v0  "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️"= true
String.startsWith_v0 "a string" "" = true

String.endsWith_v0 "a string" "in" = false
String.endsWith_v0 "a string" "ing" = true
String.endsWith_v0 "a string" "" = true
String.endsWith_v0 "żółw" "żó" = false
String.endsWith_v0 "żółw" "łw" = true
String.endsWith_v0 "👩🏻‍🚀🍇" "🍇" = true
String.endsWith_v0 "123456" "56" = true
String.endsWith_v0 "" "" = true
String.endsWith_v0 "E" "\u0014\u0004" = false
String.endsWith_v0 "🧑🏽‍🦰🧑🏼‍💻🧑🏻‍🍼✋✋🏻✋🏿" "✋✋🏿✋🏿" = false
String.endsWith_v0 "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" "ǧ̗͚̚o̙̔ͮ̇͐̇" = true
String.endsWith_v0 "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" "12xsd" = false
String.endsWith_v0 "👱👱🏻👱🏼👱🏽👱🏾👱🏿" "﷽" = false
String.endsWith_v0 "🧟‍♀️🧟‍♂️" "🧟‍♀️" = false
String.endsWith_v0  "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" "‍⚧️‍️🇵🇷"= true

String.foreach_v1 "a string" (fun x -> x) = "a string"
String.foreach_v1 "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" (fun x -> x) = "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"
String.foreach_v1 "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" (fun x -> x) = "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽"
String.foreach_v1 "👱👱🏻👱🏼👱🏽👱🏾👱🏿" (fun x -> x) = "👱👱🏻👱🏼👱🏽👱🏾👱🏿"
String.foreach_v1 "🧟‍♀️🧟‍♂️" (fun x -> x) = "🧟‍♀️🧟‍♂️"
String.foreach_v1  "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" (fun x -> x) = "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"

// fromChar
String.fromChar_v1 'a' = "a"
String.fromChar_v1 (c "1") = "1"
String.fromChar_v1 (c "👩‍👩‍👧‍👦") = "👩‍👩‍👧‍👦"
String.fromChar_v1 (c "🏳️‍⚧️‍️") = "🏳️‍⚧️‍️"
String.fromChar_v1 (c "👱🏾") = "👱🏾"
String.fromChar_v1 (c "Z̤͔ͧ̑̓") = "Z̤͔ͧ̑̓"


String.base64Decode_v0 "random string" = Test.typeError_v0 "Not a valid base64 string"
String.base64Decode_v0 "illegal chars&@:" = Test.typeError_v0 "Not a valid base64 string"
String.base64Decode_v0 "Kw" = "+"
String.base64Decode_v0 "yLo" = "Ⱥ"
String.base64Decode_v0 "xbzDs8WCdw" = "żółw"
String.base64Decode_v0 "LyotKygmQDk4NTIx" = "/*-+(&@98521"
String.base64Decode_v0 "" = "" // empty case
// Test cases from the spec with padding added
String.base64Decode_v0 "Zg" = "f"
String.base64Decode_v0 "Zg==" = "f"
String.base64Decode_v0 "Zm8" = "fo"
String.base64Decode_v0 "Zm8=" = "fo"
String.base64Decode_v0 "Zm9v" = "foo"
String.base64Decode_v0 "Zm9vYg" = "foob"
String.base64Decode_v0 "Zm9vYg==" = "foob"
String.base64Decode_v0 "Zm9vYmE" = "fooba"
String.base64Decode_v0 "Zm9vYmE=" = "fooba"
String.base64Decode_v0 "Zm9vYmFy" = "foobar"
// "Impossible cases" from apache
// https://commons.apache.org/proper/commons-codec/xref-test/org/apache/commons/codec/binary/Base64Test.html
String.base64Decode_v0 "ZE==" = "d"
String.base64Decode_v0 "ZmC=" = "f`"
String.base64Decode_v0 "Zm9vYE==" = "foo`"
String.base64Decode_v0 "Zm9vYmC=" = "foob`"
String.base64Decode_v0 "ZnJvbT0wNi8wNy8yMDEzIHF1ZXJ5PSLOms6xzrvPjs-CIM6_z4HOr8-DzrHPhM61Ig" = "from=06/07/2013 query=\"Καλώς ορίσατε\""
String.base64Decode_v0 "8J-RsfCfkbHwn4-78J-RsfCfj7zwn5Gx8J-PvfCfkbHwn4--8J-RsfCfj78" = "👱👱🏻👱🏼👱🏽👱🏾👱🏿"
// These produce strings of bytes which are technically legal it seems
String.base64Decode_v0 "-p" = "�"
String.base64Decode_v0 "lI" = "�"
String.base64Decode_v0 "5Sk" = "�)"


String.base64Encode_v0 "+" = "Kw"
String.base64Encode_v0 "Ⱥ" = "yLo"
String.base64Encode_v0 "żółw" = "xbzDs8WCdw"
String.base64Encode_v0 "/*-+(&@98521" = "LyotKygmQDk4NTIx"
String.base64Encode_v0 "" = ""
String.base64Encode_v0 "f" = "Zg"
String.base64Encode_v0 "fo" = "Zm8"
String.base64Encode_v0 "foo" = "Zm9v"
String.base64Encode_v0 "foob" = "Zm9vYg"
String.base64Encode_v0 "fooba" = "Zm9vYmE"
String.base64Encode_v0 "foobar" = "Zm9vYmFy"
String.base64Encode_v0 "Hello World" = "SGVsbG8gV29ybGQ"
String.base64Encode_v0 "from=06/07/2013 query=\"Καλώς ορίσατε\"" = "ZnJvbT0wNi8wNy8yMDEzIHF1ZXJ5PSLOms6xzrvPjs-CIM6_z4HOr8-DzrHPhM61Ig"
String.base64Encode_v0 "👱👱🏻👱🏼👱🏽👱🏾👱🏿" = "8J-RsfCfkbHwn4-78J-RsfCfj7zwn5Gx8J-PvfCfkbHwn4--8J-RsfCfj78"


String.digest_v0 "" = "OLBgp1GsljhM2TJ-sbHjaiH9txEUvgdDTAzHv2P24donTt6_529l-9Ua0vFImLlb"
String.digest_v0 "😄" = "Z2Y7YuyYHR9miKrg6mLtxSTaHRpGZuaenmGQl3QFY58pwhPCK2bIYxJQ728ChJwA"
String.digest_v0 "ελπίδα" = "j4uJEeBe6g8QrzbuxoI2roUgapGQiExE8CWEQqZao61eZVN1iSZ8cV39IM1nGqsa"
String.digest_v0 "/*-+(&@98521" = "wSGXFkLMpPufNoF2mUBAjT4YlUEb9cl0Iliy4qohwt1XFpg51PRJVTWndn5PewSr"
String.digest_v0 "👩🏻‍🚀🍇" = "hVrNUSbFOfYXwZe6zQRUFFfGPe90qr-aROG2n-hMk8kAC-xodOyHOqecLWb9HIKJ"
String.digest_v0 "🧑🏽‍🦰🧑🏼‍💻🧑🏻‍🍼✋✋🏻✋🏿" = "7Fo0ImavUzoUM_9kdjucgh6pYAHk5VovpTOUObvxacS31QoCTkcE4rpcQbJJpshE"
String.digest_v0 "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" = "U2v72uGbUR_UIiD5qF6L21pKzYi4B6OB76HGtbpM0o-2_4YB3ytPjJ7w9png3L9k"
String.digest_v0 "👱👱🏻👱🏼👱🏽👱🏾👱🏿" = "c1Wm67axXlBaejcJZxct80MvexdTtyyrTK9J9-_4RqgP1pf4Bk9SoMZpsnXpvLIx"
String.digest_v0 "🧟‍♀️🧟‍♂️" = "FBnrDureCzgPeGP9qOuW1BIiF2Wz5WejO5XtJWa81qCxcD6cZ4A_WAB0ZJzhOErc"
String.digest_v0  "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"= "3QFqrhTPpxeje6XUNObFt2eJZZ1t0pAcX42AFdFVv42hco0bTOopQK3py4KMBT0m"

// Random v2
String.length_v1 ((String.random_v2 10) |> Test.unwrap) = 10
String.length_v1 ((String.random_v2 5) |> Test.unwrap) = 5
String.length_v1 ((String.random_v2 0) |> Test.unwrap) = 0
String.random_v2 -1 = Error "Expected the argument `length` to be positive, but it was `-1`"
(String.random_v2 5) == (String.random_v2 5) = false


String.htmlEscape_v0 "test<>&\"" = "test&lt;&gt;&amp;&quot;" // HTML escaping works reasonably
String.htmlEscape_v0 "<html><head></head><body><h1>This is f#</h1></body></html>" = "&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;This is f#&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;" // HTML escaping works reasonably
String.htmlEscape_v0 "<html><head><!-- head definitions go here --></head><body><!-- the content goes here --></body></html>" = "&lt;html&gt;&lt;head&gt;&lt;!-- head definitions go here --&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- the content goes here --&gt;&lt;/body&gt;&lt;/html&gt;"
String.htmlEscape_v0 "" = ""
String.htmlEscape_v0 "😄" = "😄"
String.htmlEscape_v0 "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" = "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"
String.htmlEscape_v0 "<html><head></head><body><h1>﷽﷽﷽﷽﷽</h1></body></html>" = "&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;﷽﷽﷽﷽﷽&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;"
String.htmlEscape_v0 "<head>🧟‍♀️🧟‍♂️</head>" = "&lt;head&gt;🧟‍♀️🧟‍♂️&lt;/head&gt;"
String.htmlEscape_v0  "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"= "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"


String.isEmpty_v0 "" = true
String.isEmpty_v0 "a" = false
String.isEmpty_v0 "🧑🏼‍💻🧑🏻‍🍼" = false
String.isEmpty_v0 "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" = false
String.isEmpty_v0 "﷽﷽﷽﷽﷽" = false
String.isEmpty_v0 "👱👱🏻👱🏼👱🏽👱🏾👱🏿" = false
String.isEmpty_v0 "🧟‍♀️🧟‍♂️" = false
String.isEmpty_v0  "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"= false


String.newline_v0 = "\n"


String.length_v1 "😄" = 1
String.length_v1 "" = 0
String.length_v1 "abcdef" = 6
String.length_v1 "🧑🏽‍🦰🧑🏼‍💻🧑🏻‍🍼✋✋🏻✋🏿" = 6
String.length_v1 "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" = 5
String.length_v1 "﷽﷽﷽﷽﷽" = 5
String.length_v1 "👱👱🏻👱🏼👱🏽👱🏾👱🏿" = 6
String.length_v1 "🧟‍♀️🧟‍♂️" = 2
String.length_v1  "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"= 4


String.prepend_v0 "hello" "world" = "worldhello" // String.prepend works for ASCII range
String.prepend_v0 "hello" "" = "hello"
String.prepend_v0 "" "hello" = "hello"
String.prepend_v0 "żółw" "😄" = "😄żółw" // String.prepend works on non-ascii strings
String.prepend_v0 "123" "456" = "456123"
String.prepend_v0 "óñÜá" "abc" = "abcóñÜá"
String.prepend_v0 "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" "Z̤͔ͧ̑̓"= "Z̤͔ͧ̑̓Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"
String.prepend_v0 "﷽﷽﷽﷽﷽" "👨‍❤️‍💋‍👨" = "👨‍❤️‍💋‍👨﷽﷽﷽﷽﷽"
String.prepend_v0 "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" "﷽﷽" = "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽"
String.prepend_v0 "👱👱🏻👱🏼👱🏽👱🏾👱🏿" "✋🏻"= "✋🏻👱👱🏻👱🏼👱🏽👱🏾👱🏿"
String.prepend_v0 "🧟‍♀️🧟‍♂️" "🧟‍♂️" = "🧟‍♂️🧟‍♀️🧟‍♂️"
String.prepend_v0  "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" "👨‍❤️‍💋‍👨" = "👨‍❤️‍💋‍👨👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"
String.prepend_v0 "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" "🧟‍♂️"= "🧟‍♂️żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿"


String.replaceAll_v0 "abcABCcbaCBA" "b" "x" = "axcABCcxaCBA"
String.replaceAll_v0 "abcABCcbaCBA" "" "x" = "xaxbxcxAxBxCxcxbxaxCxBxAx"
String.replaceAll_v0 "" "" "&" = "&"
String.replaceAll_v0 "abcABCcbaCBA" "b" "" = "acABCcaCBA"
String.replaceAll_v0 "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" "ä͖̭̈̇" "$" = "Z̤͔ͧ̑̓$lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"
String.replaceAll_v0 "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" "﷽﷽" "$" = "$$$$$$$$"
String.replaceAll_v0 "👱👱🏻👱🏼👱🏽👱🏾👱🏿" "👱🏽" "✋🏻"= "👱👱🏻👱🏼✋🏻👱🏾👱🏿"
String.replaceAll_v0 "🧟‍♀️🧟‍♂️" "🧟‍♂️" "🧑🏽‍🦰" = "🧟‍♀️🧑🏽‍🦰"
String.replaceAll_v0  "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" "👨‍❤️‍💋‍👨" "👨‍❤️‍💋‍👨" = "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"
String.replaceAll_v0 "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" "🧑🏻‍🍼" "🧟‍♂️"= "żółw🧑🏽‍🦰🧟‍♂️✋✋🏻✋🏿"


String.slugify_v2 "  M@y  'super'  Really- exce+llent *Uber_ ama\"zing* ~very   5x5 ~ \"clever\" thing: coffee😭!" = "my-super-really-excellent-uber-amazing-very-5x5-clever-thing-coffee"
String.slugify_v2 "  m@y  'super'  really- excellent *uber_ amazing* ~very  ~ \"clever\" thing: coffee😭!" = "my-super-really-excellent-uber-amazing-very-clever-thing-coffee"
String.slugify_v2 "" = ""
String.slugify_v2 "ABCD-45646sassa" = "abcd-45646sassa"
String.slugify_v2 "ddsd516ds125sd12sd12Ü" = "ddsd516ds125sd12sd12"
String.slugify_v2 "q=\u0002$\u001a<+MC" = "qmc"
String.slugify_v2 "🎁🎄Ǣʚ231" = "231"
String.slugify_v2 "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" = ""
String.slugify_v2 "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" = "zlo"
String.slugify_v2 "👱👱🏻👱🏼👱🏽👱🏾👱🏿" = ""
String.slugify_v2 "🧟‍♀️🧟‍♂️" = ""
String.slugify_v2 "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" = ""
String.slugify_v2 "b\x01c\x02d\x03e\x04f\x05g\x06h\x07i\x08j\x09k\x0Al\x0Bm\x0Cn\x0Do\x0Ep\x0Fq" = "bcdefghij-k-lm-n-opq"
String.slugify_v2 "a\x10b\x11c\x12d\x13e\x14f\x15g\x16h\x17i\x18j\x19k\x1Al\x1Bm\x1Cn\x1Do\x1Ep\x1Fq" = "abcdefghijklmnopq"
String.slugify_v2 "!\"#$%&'()*+,-./" = "-"
String.slugify_v2 ":;<=>?@" = ""
String.slugify_v2 "[\\]^_`" = "-"
String.slugify_v2 "{|}~\x7F" = ""


// toList and fromList
String.fromList_v1 [] = ""
String.fromList_v1 [c "a"] = "a"
String.fromList_v1 [c "👩‍👩‍👧‍👦", c "🏳️‍⚧️‍️", c "👱🏾", c "Z̤͔ͧ̑̓"] = "👩‍👩‍👧‍👦🏳️‍⚧️‍️👱🏾Z̤͔ͧ̑̓"
String.fromList_v1 ["a"] = Test.typeError_v0 "Expected `l` to be a list of Characters, but the list contained `\"a\"`"
String.fromList_v1 [6] = Test.typeError_v0 "Expected `l` to be a list of Characters, but the list contained `6`"


String.toList_v1 "" = []
String.toList_v1 "ab" = ['a', 'b']
String.toList_v1 "👨‍👩‍👧‍👦" = [ c "👨‍👩‍👧‍👦" ]
String.toList_v1 "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" = [ c "Z̤͔ͧ̑̓", c "ä͖̭̈̇", c "lͮ̒ͫ", c "ǧ̗͚̚", c "o̙̔ͮ̇͐̇" ]
String.toList_v1 "👩‍👩‍👧‍👦🏳️‍⚧️‍️👱🏾Z̤͔ͧ̑̓" = [c "👩‍👩‍👧‍👦", c "🏳️‍⚧️‍️", c "👱🏾", c "Z̤͔ͧ̑̓"]
("ab1" |> String.toList_v1 |> String.fromList_v1) = "ab1"
("@Ǣá1" |> String.toList_v1 |> String.fromList_v1) = "@Ǣá1"
("👩‍👩‍👧‍👦🏳️‍⚧️‍️👱🏾Z̤͔ͧ̑̓" |> String.toList_v1 |> String.fromList_v1) = "👩‍👩‍👧‍👦🏳️‍⚧️‍️👱🏾Z̤͔ͧ̑̓"


String.split_v1 "hello😄world" "😄" = [ "hello"; "world" ]
String.split_v1 "hello&&&&world" "&&&&" = [ "hello"; "world" ]
String.split_v1 "hello34564world34564sun" "😄" = [ "hello34564world34564sun" ]
String.split_v1 "hello34564world34564sun" "34564" = [ "hello"; "world"; "sun" ]
String.split_v1 "" "34564" = [""]
String.split_v1 "34564" "" = [ "3"; "4"; "5"; "6"; "4" ]
String.split_v1 "🧑🏽‍🦰🧑🏼‍💻🧑🏻‍🍼✋✋🏻✋🏿" "🧑🏻‍🍼" = [ "🧑🏽‍🦰🧑🏼‍💻"; "✋✋🏻✋🏿" ]
String.split_v1 "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" = [""; ""]
String.split_v1 "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" "﷽﷽﷽﷽" = [ ""; ""; ""; ""; "" ]
String.split_v1 "👱👱🏻👱🏼👱🏽👱🏾👱🏿" "👱🏼👱🏽" = [ "👱👱🏻"; "👱🏾👱🏿" ]
String.split_v1 "🧟‍♀️🧟‍♂️" "👱🏽" = [ "🧟‍♀️🧟‍♂️" ]
String.split_v1 "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" "👩‍👩‍👧‍👦"= [ "👨‍❤️‍💋‍👨"; "🏳️‍⚧️‍️🇵🇷" ]
String.split_v1 "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" "🧑🏽‍🦰" = [ "żółw"; "🧑🏻‍🍼✋✋🏻✋🏿" ]
String.split_v1 "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫ" = [ "", "ǧ̗͚̚o̙̔ͮ̇͐̇" ]
String.split_v1 "666666" "6" = [""; ""; ""; ""; ""; ""; ""]
String.split_v1 "55555" "5" = [""; ""; ""; ""; ""; ""]
String.split_v1 "4444" "4" = [""; ""; ""; ""; ""]
String.split_v1 "333" "3" = [""; ""; ""; ""]
String.split_v1 "22" "2" = [""; ""; ""]
String.split_v1 "1" "1" = [""; ""]
String.split_v1 "" "" = []
String.split_v1 "666666x" "6" = [""; ""; ""; ""; ""; ""; "x"]
String.split_v1 "55555x" "5" = [""; ""; ""; ""; ""; "x"]
String.split_v1 "4444x" "4" = [""; ""; ""; ""; "x"]
String.split_v1 "333x" "3" = [""; ""; ""; "x"]
String.split_v1 "22x" "2" = [""; ""; "x"]
String.split_v1 "1x" "1" = [""; "x"]
String.split_v1 "x666666" "6" = ["x"; ""; ""; ""; ""; ""; ""]
String.split_v1 "x55555" "5" = ["x"; ""; ""; ""; ""; ""]
String.split_v1 "x4444" "4" = ["x"; ""; ""; ""; ""]
String.split_v1 "x333" "3" = ["x"; ""; ""; ""]
String.split_v1 "x22" "2" = ["x"; ""; ""]
String.split_v1 "x1" "1" = ["x"; ""]
String.split_v1 "x666666y" "6" = ["x"; ""; ""; ""; ""; ""; "y"]
String.split_v1 "x55555y" "5" = ["x"; ""; ""; ""; ""; "y"]
String.split_v1 "x4444y" "4" = ["x"; ""; ""; ""; "y"]
String.split_v1 "x333y" "3" = ["x"; ""; ""; "y"]
String.split_v1 "x22y" "2" = ["x"; ""; "y"]
String.split_v1 "x1y" "1" = ["x"; "y"]
String.split_v1 "6a6aa6aaa6aaaa" "a" = ["6"; "6"; ""; "6"; ""; ""; "6"; ""; ""; ""; ""]
String.split_v1 "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" "" = ["👨‍❤️‍💋‍👨"; "👩‍👩‍👧‍👦"; "🏳️‍⚧️‍️"; "🇵🇷"]
String.split_v1 "👨‍👩‍👧‍👦" "👩" = ["👨‍👩‍👧‍👦"]


String.toList_v1 "" = []
String.toList_v1 "abc" = [ 'a'; 'b'; 'c']
String.toList_v1 "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" = [ c "Z̤͔ͧ̑̓"; c "ä͖̭̈̇"; c "lͮ̒ͫ"; c "ǧ̗͚̚"; c "o̙̔ͮ̇͐̇" ]
String.toList_v1 "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" = [ c "﷽"; c "﷽"; c "﷽"; c "﷽"; c "﷽"; c "﷽"; c "﷽"; c "﷽"; c "﷽"; c "﷽"; c "﷽"; c "﷽"; c "﷽"; c "﷽"; c "﷽"; c "﷽" ]
String.toList_v1 "👱👱🏻👱🏼👱🏽👱🏾👱🏿" = [ c "👱"; c "👱🏻"; c "👱🏼"; c "👱🏽"; c "👱🏾"; c "👱🏿" ]
String.toList_v1 "🧟‍♀️🧟‍♂️" = [ c "🧟‍♀️"; c "🧟‍♂️" ]
String.toList_v1 "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" = [ c "👨‍❤️‍💋‍👨"; c "👩‍👩‍👧‍👦"; c "🏳️‍⚧️‍️"; c "🇵🇷" ]
String.toList_v1 "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" = [ c "ż"; c "ó"; c "ł"; c "w"; c "🧑🏽‍🦰"; c "🧑🏻‍🍼"; c "✋"; c "✋🏻"; c "✋🏿" ]


String.toLowercase_v1 "HELLO😄WORLD" = "hello😄world"
String.toLowercase_v1 "" = ""
String.toLowercase_v1 "ABCDEF" = "abcdef" // String.toLowercase_v0 works for ASCII range
String.toLowercase_v1 "AB323CDEF" = "ab323cdef"
String.toLowercase_v1 "SÁNCHEZ" = "sánchez" // not lowercase a
String.toLowercase_v1 "sánchez" = "sánchez"
String.toLowercase_v1 "ŻÓŁW" = "żółw" // String.toLowercase_v1 works on non-ascii strings
String.toLowercase_v1 "😄ORANGE" = "😄orange"
String.toLowercase_v1 "🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" = "🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿"
String.toLowercase_v1 "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" = "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽"
String.toLowercase_v1 "👱👱🏻👱🏼👱🏽👱🏾👱🏿" = "👱👱🏻👱🏼👱🏽👱🏾👱🏿"
String.toLowercase_v1 "🧟‍♀️🧟‍♂️" = "🧟‍♀️🧟‍♂️"
String.toLowercase_v1 "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" = "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"
String.toLowercase_v1 "ŻÓŁW🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" = "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿"
String.toLowercase_v1 "Ჾ" = "ჾ"

String.toLowercase_v1 "Z̤͔ͧ̑̓Ä͖̭̈̇Lͮ̒ͫǦ̗͚̚O̙̔ͮ̇͐̇" = "z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"

String.toLowercase_v1 "H̬̤̗̤͝e͜ ̜̥̝̻͍̟́w̕h̖̯͓o̝͙̖͎̱̮ ҉̺̙̞̟͈W̷̼̭a̺̪͍į͈͕̭͙̯̜t̶̼̮s̘͙͖̕ ̠̫̠B̻͍͙͉̳ͅe̵h̵̬͇̫͙i̹͓̳̳̮͎̫̕n͟d̴̪̜̖ ̰͉̩͇͙̲͞ͅT͖̼͓̪͢h͏͓̮̻e̬̝̟ͅ ̤̹̝W͙̞̝͔͇͝ͅa͏͓͔̹̼̣l̴͔̰̤̟͔ḽ̫.͕" = "h̬̤̗̤͝e͜ ̜̥̝̻͍̟́w̕h̖̯͓o̝͙̖͎̱̮ ҉̺̙̞̟͈w̷̼̭a̺̪͍į͈͕̭͙̯̜t̶̼̮s̘͙͖̕ ̠̫̠b̻͍͙͉̳ͅe̵h̵̬͇̫͙i̹͓̳̳̮͎̫̕n͟d̴̪̜̖ ̰͉̩͇͙̲͞ͅt͖̼͓̪͢h͏͓̮̻e̬̝̟ͅ ̤̹̝w͙̞̝͔͇͝ͅa͏͓͔̹̼̣l̴͔̰̤̟͔ḽ̫.͕"


String.toUppercase_v1 "" = ""
String.toUppercase_v1 "hello😄world" = "HELLO😄WORLD"
String.toUppercase_v1 "abcdef" = "ABCDEF"
String.toUppercase_v1 "ab323cdef" = "AB323CDEF"
String.toUppercase_v1 "sánchez" = "SÁNCHEZ" // not lowercase a
String.toUppercase_v1 "SÁNChEZ" = "SÁNCHEZ"
String.toUppercase_v1 "żółw" = "ŻÓŁW"
String.toUppercase_v1 "😄orange" = "😄ORANGE"
String.toUppercase_v1 "🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" = "🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿"
String.toUppercase_v1 "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" = "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽"
String.toUppercase_v1 "👱👱🏻👱🏼👱🏽👱🏾👱🏿" = "👱👱🏻👱🏼👱🏽👱🏾👱🏿"
String.toUppercase_v1 "🧟‍♀️🧟‍♂️" = "🧟‍♀️🧟‍♂️"
String.toUppercase_v1 "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" = "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"
String.toUppercase_v1 "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" = "ŻÓŁW🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿"
String.toUppercase_v1 "ჾ" = "Ჾ"

// TODO: There are two types of unicode case "mapping" (conversion), "simple"
// and "full". .NET supports simple mapping, which maps a single character to a
// single character. It does not support "full" mapping, which maps a single
// character to multiple characters. OCaml does correctly support this however,
// so some of these tests need to be disabled for now while we come up with a
// solution.

// Discussed at https://github.com/dotnet/runtime/issues/30960, specifially
// https://github.com/dotnet/runtime/issues/30960#issuecomment-535274401

// A possible solution is to write our own case mapper, or reuse an existing
// one. A potential candidate is
// https://github.com/dotnet/corefxlab/tree/archive/src/System.Text.CaseFolding
// (packaged at
// https://dnceng.visualstudio.com/public/_packaging?_a=package&feed=dotnet-experimental&view=overview&package=System.Text.CaseFolding&version=0.1.2-alpha.21059.1&protocolType=NuGet)

String.toUppercase_v1 "ﬁﬂ" = "ﬁﬂ" // should be "FIFL"
String.toUppercase_v1 "և" = "և" // should be "ԵՒ"


String.toUppercase_v1 "z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" = "Z̤͔ͧ̑̓Ä͖̭̈̇Lͮ̒ͫǦ̗͚̚O̙̔ͮ̇͐̇"

String.toUppercase_v1 "H̬̤̗̤͝e͜ ̜̥̝̻͍̟́w̕h̖̯͓o̝͙̖͎̱̮ ҉̺̙̞̟͈W̷̼̭a̺̪͍į͈͕̭͙̯̜t̶̼̮s̘͙͖̕ ̠̫̠B̻͍͙͉̳ͅe̵h̵̬͇̫͙i̹͓̳̳̮͎̫̕n͟d̴̪̜̖ ̰͉̩͇͙̲͞ͅT͖̼͓̪͢h͏͓̮̻e̬̝̟ͅ ̤̹̝W͙̞̝͔͇͝ͅa͏͓͔̹̼̣l̴͔̰̤̟͔ḽ̫.͕" = "H̬̤̗̤͝E͜ ̜̥̝̻͍̟́W̕H̖̯͓O̝͙̖͎̱̮ ҉̺̙̞̟͈W̷̼̭A̺̪͍Į͈͕̭͙̯̜T̶̼̮S̘͙͖̕ ̠̫̠B̻͍͙͉̳ΙE̵H̵̬͇̫͙I̹͓̳̳̮͎̫̕N͟D̴̪̜̖ ̰͉̩͇͙̲͞ΙT͖̼͓̪͢H͏͓̮̻E̬̝̟Ι ̤̹̝W͙̞̝͔͇͝ΙA͏͓͔̹̼̣L̴͔̰̤̟͔Ḽ̫.͕"

String.trimEnd_v0 "      " = ""
String.trimEnd_v0 "" = ""
String.trimEnd_v0 "  foo  " = "  foo"
String.trimEnd_v0 "  foo bar  " = "  foo bar"
String.trimEnd_v0 "  foo" = "  foo"
String.trimEnd_v0 " 😄foobar😄 " = " 😄foobar😄"
String.trimEnd_v0 "  foo bar  " = "  foo bar"
String.trimEnd_v0 "foo  " = "foo"
String.trimEnd_v0 "foo" = "foo"
String.trimEnd_v0 " \xe2\x80\x83foo\xe2\x80\x83bar\xe2\x80\x83 " = " \xe2\x80\x83foo\xe2\x80\x83bar\xe2\x80\x83"
String.trimEnd_v0 " \xf0\x9f\x98\x84foobar\xf0\x9f\x98\x84 " = " \xf0\x9f\x98\x84foobar\xf0\x9f\x98\x84"
String.trimEnd_v0 "     żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿   " = "     żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿"
String.trimEnd_v0 "  Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇  " = "  Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"
String.trimEnd_v0 "       ﷽﷽  " = "       ﷽﷽"
String.trimEnd_v0 " 🧟‍♀️🧟‍♂️ " = " 🧟‍♀️🧟‍♂️"
String.trimEnd_v0 " 👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷     " = " 👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"
String.trimEnd_v0 "          żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿  " = "          żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿"
String.trimEnd_v0 "🇺🇸🇷🇺🇸 🇦🇫🇦🇲🇸" = "🇺🇸🇷🇺🇸 🇦🇫🇦🇲🇸"
String.trimStart_v0 " \xe2\x80\x83foo\xe2\x80\x83bar\xe2\x80\x83 " = "\xe2\x80\x83foo\xe2\x80\x83bar\xe2\x80\x83 "
String.trimStart_v0 " \xf0\x9f\x98\x84foobar\xf0\x9f\x98\x84 " = "\xf0\x9f\x98\x84foobar\xf0\x9f\x98\x84 "
String.trimStart_v0 "      " = ""
String.trimStart_v0 "" = ""
String.trimStart_v0 "  foo  " = "foo  "
String.trimStart_v0 "  foo bar  " = "foo bar  "
String.trimStart_v0 "  foo" = "foo"
String.trimStart_v0 " 😄foobar😄 " = "😄foobar😄 "
String.trimStart_v0 "  foo bar  " = "foo bar  "
String.trimStart_v0 "foo  " = "foo  "
String.trimStart_v0 "foo" = "foo"
String.trimStart_v0 "     żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿   " = "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿   "
String.trimStart_v0 "  Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇  " = "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇  "
String.trimStart_v0 "       ﷽﷽  " = "﷽﷽  "
String.trimStart_v0 " 🧟‍♀️🧟‍♂️ " = "🧟‍♀️🧟‍♂️ "
String.trimStart_v0 " 👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷     " = "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷     "
String.trimStart_v0 "          żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿  " = "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿  "

String.trim_v0 "      " = ""
String.trim_v0 "" = ""
String.trim_v0 "  foo  " = "foo" // String trims both leading + trailing spaces
String.trim_v0 "  foo bar  " = "foo bar" // String trims both leading + trailing spaces, leaving inner untouched
String.trim_v0 "  foo" = "foo" // String trims leading spaces
String.trim_v0 " 😄foobar😄 " = "😄foobar😄" // String trims both leading + trailing spaces, preserving emoji
String.trim_v0 "  foo bar " = "foo bar" // String trims both leading + trailing spaces, leaving inner untouched w/ unicode spaces
String.trim_v0 "foo  " = "foo" // String trims trailing spaces
String.trim_v0 "foo" = "foo" // String trim noops
String.trim_v0 "     żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿   " = "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿"
String.trim_v0 "  Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇  " = "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"
String.trim_v0 "       ﷽﷽" = "﷽﷽"
String.trim_v0 " 🧟‍♀️🧟‍♂️ " = "🧟‍♀️🧟‍♂️"
String.trim_v0 " 👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷     " = "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷"
String.trim_v0 "          żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" = "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿"
String.trim_v0 " \xe2\x80\x83foo\xe2\x80\x83bar\xe2\x80\x83 " = "\xe2\x80\x83foo\xe2\x80\x83bar\xe2\x80\x83"
String.trim_v0 " \xf0\x9f\x98\x84foobar\xf0\x9f\x98\x84 " = "\xf0\x9f\x98\x84foobar\xf0\x9f\x98\x84"
String.trim_v0 "쉆ꥨ逴皪巌䖑ⱝዓ淋" = "쉆ꥨ逴皪巌䖑ⱝዓ淋"

String.reverse_v0 "abcde" = "edcba"
String.reverse_v0 "0abcde" = "edcba0"
String.reverse_v0 "a" = "a"
String.reverse_v0 "" = ""
String.reverse_v0 "ábc" = "cbá"
String.reverse_v0 "🎁🧸Ǆʠ123" = "321ʠǄ🧸🎁"
String.reverse_v0 "😄foobar👽" = "👽raboof😄"
String.reverse_v0 "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" = "✋🏿✋🏻✋🧑🏻‍🍼🧑🏽‍🦰włóż"
String.reverse_v0 "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" = "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽"
String.reverse_v0 "👱👱🏻👱🏼👱🏽👱🏾👱🏿" = "👱🏿👱🏾👱🏽👱🏼👱🏻👱"
String.reverse_v0 "🧟‍♀️🧟‍♂️" = "🧟‍♂️🧟‍♀️"
String.reverse_v0 "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" = "🇵🇷🏳️‍⚧️‍️👩‍👩‍👧‍👦👨‍❤️‍💋‍👨"
String.reverse_v0 "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" = "o̙̔ͮ̇͐̇ǧ̗͚̚lͮ̒ͫä͖̭̈̇Z̤͔ͧ̑̓"

String.dropFirst_v0 "abcd" -3 = "abcd"
String.dropFirst_v0 "abcd" 0 = "abcd"
String.dropFirst_v0 "abcd" 3 = "d"
String.dropFirst_v0 "" 3 = ""
String.dropFirst_v0 "abcd" 3 = "d"
String.dropFirst_v0 "🍏🍒🍒" 1 = "🍒🍒"
String.dropFirst_v0 "🍏🍒🍍" 2 = "🍍"
String.dropFirst_v0 "🍏a🍒b🍍c" 2 = "🍒b🍍c"
String.dropFirst_v0 "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" 5 = "🧑🏻‍🍼✋✋🏻✋🏿"
String.dropFirst_v0 "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" 1 = "ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"
String.dropFirst_v0 "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" 2 = "lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"
String.dropFirst_v0 "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" 3 = "ǧ̗͚̚o̙̔ͮ̇͐̇"
String.dropFirst_v0 "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" 1 = "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽"
String.dropFirst_v0 "👱👱🏻👱🏼👱🏽👱🏾👱🏿" 1 = "👱🏻👱🏼👱🏽👱🏾👱🏿"
String.dropFirst_v0 "🧟‍♀️🧟‍♂️" 20 = ""
String.dropFirst_v0 "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" 3 = "🇵🇷"

String.dropLast_v0 "abcd" -3 = "abcd"
String.dropLast_v0 "abcd" 0 = "abcd"
String.dropLast_v0 "abcd" 3 = "a"
String.dropLast_v0 "" 3 = ""
String.dropLast_v0 "🍏🍒🍒" 1 = "🍏🍒"
String.dropLast_v0 "🍏🍒🍍" 2 = "🍏"
String.dropLast_v0 "🍏a🍒b🍍c" 2 = "🍏a🍒b"
String.dropLast_v0 "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" 2 = "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫ"
String.dropLast_v0 "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" 10 = "﷽﷽﷽﷽﷽﷽"
String.dropLast_v0 "👱👱🏻👱🏼👱🏽👱🏾👱🏿" 3 = "👱👱🏻👱🏼"
String.dropLast_v0 "🧟‍♀️🧟‍♂️" 20 = ""
String.dropLast_v0 "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" 2 = "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦"
String.dropLast_v0 "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" 4 = "żółw🧑🏽‍🦰"

String.last_v0 "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" 4 = "🧑🏻‍🍼✋✋🏻✋🏿"
String.last_v0 "abcd" -3 = ""
String.last_v0 "abcd" 0 = ""
String.last_v0 "" 7 = ""
String.last_v0 "abcd" 1 = "d"
String.last_v0 "abcd" 2 = "cd"
String.last_v0 "abcd" 3 = "bcd"
String.last_v0 "🍍🍍🍏" 1 = "🍏"
String.last_v0 "🍊🍍🍏" 2 = "🍍🍏"
String.last_v0 "🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿🧑🏻‍🍼" 1 = "🧑🏻‍🍼"
String.last_v0 "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" 2 = "ǧ̗͚̚o̙̔ͮ̇͐̇"
String.last_v0 "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" 2 = "﷽﷽"
String.last_v0 "👱👱🏻👱🏼👱🏽👱🏾👱🏿" 3 = "👱🏽👱🏾👱🏿"
String.last_v0 "🧟‍♀️🧟‍♂️" 1 = "🧟‍♂️"
String.last_v0 "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" 1 = "🇵🇷"

String.contains_v0 "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" "2223" = false
String.contains_v0 "👱👱🏻👱🏼👱🏽👱🏾" "👱🏿" = false
String.contains_v0 "🧟‍♀️🧟‍♂️" "🧟‍♂️" = true
String.contains_v0 "🧟‍♀️🧟‍♂️" "🧟‍♂️🧟‍♂️" = false
String.contains_v0 "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️🇵🇷" "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦" = true
String.contains_v0 "اختبار" "اختبار" = true
String.contains_v0 "" "" = true
String.contains_v0 "a" "" = true
String.contains_v0 "" "a" = false

String.slice_v0 "abcd" -2 4 = "cd"
String.slice_v0 "abcd" -5 -6 = ""
String.slice_v0 "abcd" -5 1 = "a"
String.slice_v0 "abcd" 0 -1 = "abc"
String.slice_v0 "abcd" 2 3 = "c"
String.slice_v0 "abcd" 2 6 = "cd"
String.slice_v0 "abcd" 3 2 = ""
String.slice_v0 "abcd" 5 6 = ""
String.slice_v0 "🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" 2 10 = "✋✋🏻✋🏿"
String.slice_v0 "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" 1 3 = "ä͖̭̈̇lͮ̒ͫ"
String.slice_v0 "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" 2 6 = "﷽﷽﷽﷽"
String.slice_v0 "👱👱🏻👱🏼👱🏽👱🏾👱🏿" 2 6 = "👱🏼👱🏽👱🏾👱🏿"
String.slice_v0 "🧟‍♀️🧟‍♂️" 2 4 = ""
String.slice_v0 "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" 2 10 = "🏳️‍⚧️‍️🇵🇷"
String.slice_v0 "abc" 0 4503599627370498I = "abc"

String.first_v0 "abcd" -3 = ""
String.first_v0 "abcd" 0 = ""
String.first_v0 "abcd" 1 = "a"
String.first_v0 "abcd" 2 = "ab"
String.first_v0 "abcd" 3 = "abc"
String.first_v0 "abcd" 3000000000000000L = "abcd"
String.first_v0 "" 7 = ""
String.first_v0 "🍊🍍🍏" 1 = "🍊"
String.first_v0 "🍊🍍🍏" 2 = "🍊🍍"
String.first_v0 "🍊🍍🍏" 3 = "🍊🍍🍏"
String.first_v0 "🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" 1 = "🧑🏽‍🦰"
String.first_v0 "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" 10 = "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"
String.first_v0 "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" 2 = "Z̤͔ͧ̑̓ä͖̭̈̇"
String.first_v0 "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" 3 = "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫ"
String.first_v0 "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" 4 = "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚"
String.first_v0 "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" 1 = "﷽"
String.first_v0 "👱👱🏻👱🏼👱🏽👱🏾👱🏿" 2 = "👱👱🏻"
String.first_v0 "🧟‍♀️🧟‍♂️" 1 = "🧟‍♀️"
String.first_v0 "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️🇵🇷" 3 = "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️‍️"

String.padStart_v0 "123" "0" 3 = "123"
String.padStart_v0 "123" "0" -3 = "123"
String.padStart_v0 "123" "_-" 4 = Test.typeError_v0 "Expected the argument `padWith` to be 1 character long, but it was `\"_-\"`"
String.padStart_v0 "123" "" 10 = Test.typeError_v0 "Expected the argument `padWith` to be 1 character long, but it was `\"\"`"
String.padStart_v0 "123" "0" 6 = "000123"
String.padStart_v0 "" "0" 0 = ""
String.padStart_v0 "123🍊🍊" "0" 3 = "123🍊🍊"
String.padStart_v0 "🍍🍍🍊🍊" "0" 7 = "000🍍🍍🍊🍊"
String.padStart_v0 "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" "0" 10 = "0żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿"
String.padStart_v0 "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" "0" 10 = "00000Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇"
String.padStart_v0 "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" "0" 20 = "0000﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽"
String.padStart_v0 "👱👱🏻👱🏼👱🏽👱🏾👱🏿" "0" 10 = "0000👱👱🏻👱🏼👱🏽👱🏾👱🏿"
String.padStart_v0 "🧟‍♀️🧟‍♂️" "0" 5 = "000🧟‍♀️🧟‍♂️"
String.padStart_v0 "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️🇵🇷" "0" 10 = "000000👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️🇵🇷"
String.padStart_v0 "鷝" "觌഻" 0 = "鷝"

String.padEnd_v0 "123" "0" 3 = "123"
String.padEnd_v0 "123" "0" -3 = "123"
String.padEnd_v0 "123" "_-" 3 = Test.typeError_v0 "Expected the argument `padWith` to be 1 character long, but it was `\"_-\"`"
String.padEnd_v0 "123" "" 10 = Test.typeError_v0 "Expected the argument `padWith` to be 1 character long, but it was `\"\"`"
String.padEnd_v0 "123" "0" 6 = "123000"
String.padEnd_v0 "" "0" 0 = ""
String.padEnd_v0 "123🍊🍊" "0" 8 = "123🍊🍊000"
String.padEnd_v0 "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" "0" 10 = "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿0"
String.padEnd_v0 "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇" "0" 10 = "Z̤͔ͧ̑̓ä͖̭̈̇lͮ̒ͫǧ̗͚̚o̙̔ͮ̇͐̇00000"
String.padEnd_v0 "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽" "0" 20 = "﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽﷽0000"
String.padEnd_v0 "👱👱🏻👱🏼👱🏽👱🏾👱🏿" "0" 10 = "👱👱🏻👱🏼👱🏽👱🏾👱🏿0000"
String.padEnd_v0 "🧟‍♀️🧟‍♂️" "0" 5 = "🧟‍♀️🧟‍♂️000"
String.padEnd_v0 "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️🇵🇷" "0" 10 = "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️🇵🇷000000"
String.padEnd_v0 "鷝" "觌഻" 0 = "鷝"

String.take_v0 "123456" 3 = "123"
String.take_v0 "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️🇵🇷" 3 = "👨‍❤️‍💋‍👨👩‍👩‍👧‍👦🏳️‍⚧️"
String.take_v0 "﷽﷽﷽﷽﷽﷽﷽﷽" 2 = "﷽﷽"
String.take_v0 "123" -6 = "" // return an empty string for negatives (so that it works the same as List::take)
String.take_v0 "żółw🧑🏽‍🦰🧑🏻‍🍼✋✋🏻✋🏿" 0 = ""
String.take_v0 "123🍊🍊" 10 = "123🍊🍊"

// Check that foreach executes the right number of times
(let v = String.foreach_v1 "a string" (fun x -> let _ = Test.incrementSideEffectCounter_v0 false in 'c') in
 (v, Test.sideEffectCount_v0)) = ("cccccccc", 8)
